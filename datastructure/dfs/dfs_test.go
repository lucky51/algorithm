/*
  0 1 2 3 4 5 6 7 8 9
0 0,0,1,1,0,1,0,0,1,0,
1 1,1,2,1,1,3,1,1,1,0,
2 1,2,1,1,1,3,2,1,1,0,
3 0,1,1,3,3,3,2,1,2,1,
4 0,3,3,3,3,3,1,1,1,0,
5 0,1,3,1,2,1,2,1,1,1,
6 1,2,1,2,1,1,2,2,2,1,
7 1,1,1,1,1,1,2,2,2,0,
8 1,1,1,2,2,1,2,1,2,1,
9 1,1,1,0,1,1,0,1,1,0,

*/

package dfs

import (
	"fmt"
	"testing"
)

func TestNumIslands(t *testing.T) {
	var arr = [][]byte{
		{1, 1, 1, 1, 0},
		{1, 1, 0, 1, 0},
		{1, 1, 0, 0, 0},
		{0, 0, 0, 0, 0},
	}

	var arr1 = [][]byte{{1, 1, 1}, {0, 1, 0}, {1, 1, 1}}
	var arr2 = [][]byte{{1, 1, 1, 1, 0}, {1, 1, 0, 1, 0}, {1, 1, 0, 0, 0}, {0, 0, 0, 0, 0}}
	fmt.Println(numIslands(arr))
	fmt.Println(numIslands(arr1))
	fmt.Println(numIslands(arr2))
}

func TestMaxAreaOfIsland(t *testing.T) {
	var arr = [][]int{
		{0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0},
		{0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0},
		{0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0},
	}
	fmt.Println(maxAreaOfIsland(arr))
}

func TestClosedIsland(t *testing.T) {
	arr := [][]int{
		{0, 0, 1, 1, 0, 1, 0, 0, 1, 0},
		{1, 1, 0, 1, 1, 0, 1, 1, 1, 0},
		{1, 0, 1, 1, 1, 0, 0, 1, 1, 0},
		{0, 1, 1, 0, 0, 0, 0, 1, 0, 1},
		{0, 0, 0, 0, 0, 0, 1, 1, 1, 0},
		{0, 1, 0, 1, 0, 1, 0, 1, 1, 1},
		{1, 0, 1, 0, 1, 1, 0, 0, 0, 1},
		{1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
		{1, 1, 1, 0, 0, 1, 0, 1, 0, 1},
		{1, 1, 1, 0, 1, 1, 0, 1, 1, 0},
	}
	fmt.Println(closedIsland(arr))
}
